function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function TabNavItem(props) {
  var isActive = props.isActive,
      index = props.index,
      className = props.className,
      disabled = props.disabled,
      tabIdx = props.tabIdx,
      attributes = _objectWithoutPropertiesLoose(props, ["isActive", "index", "tabIndex", "className", "disabled", "tabIdx"]);

  var getClassName = function getClassName() {
    return 'nav-link ' + (className || '') + (isActive ? ' active ' : '') + (disabled === true ? ' disabled ' : '');
  };

  var getNavIdx = function getNavIdx() {
    return tabIdx + '-' + (index + 1);
  };

  return /*#__PURE__*/React__default.createElement("li", {
    role: "presentation"
  }, /*#__PURE__*/React__default.createElement("a", _extends({}, attributes, {
    index: index,
    id: getNavIdx(),
    href: '#' + getNavIdx(),
    className: getClassName(),
    role: "tab",
    "aria-selected": isActive ? 'true' : 'false',
    "aria-disabled": disabled ? 'true' : 'false',
    "aria-controls": getNavIdx()
  }), props.children));
}

var recursiveMap = function recursiveMap(children, fn) {
  return React__default.Children.map(children, function (child, index) {
    if (!React__default.isValidElement(child)) {
      return child;
    }

    if (child.props.children) {
      child = React__default.cloneElement(child, {
        children: recursiveMap(child.props.children, fn)
      });
    }

    return fn(child, index);
  });
};
var tabIdx = 0;
var getTabName = function getTabName() {
  return 'tab' + ++tabIdx;
};

function TabPanel(props) {
  var isActive = props.isActive,
      index = props.index,
      className = props.className,
      attributes = _objectWithoutPropertiesLoose(props, ["isActive", "index", "className"]);

  var getClassName = function getClassName() {
    return 'tab-pane ' + (className || '') + (isActive ? ' active ' : '');
  };

  return /*#__PURE__*/React__default.createElement("div", _extends({}, attributes, {
    className: getClassName(),
    role: "tabpanel",
    "aria-labelledby": 'tab-' + index
  }), props.children);
}

function Tabs(props) {
  var selected = props.selected,
      theme = props.theme,
      className = props.className,
      justified = props.justified,
      orientation = props.orientation,
      tabName = props.tabName,
      onLeaveTab = props.onLeaveTab,
      onShowTab = props.onShowTab,
      attributes = _objectWithoutPropertiesLoose(props, ["selected", "theme", "className", "justified", "orientation", "enableURLhash", "tabName", "onLeaveTab", "onShowTab"]);

  var _useState = React.useState(tabName || getTabName()),
      tabIdx = _useState[0];

  var _useState2 = React.useState(0),
      selectedIndex = _useState2[0],
      updateSelectedIndex = _useState2[1];

  React.useEffect(function () {
    navigateTab(selected);
  }, [selected]);

  var navigateTab = function navigateTab(index) {
    var nextIndex = parseInt(index);

    if (nextIndex !== selectedIndex) {
      if (typeof onLeaveTab === 'function') {
        if (onLeaveTab(selectedIndex, nextIndex) === false) return;
      }

      updateSelectedIndex(nextIndex);

      if (typeof onShowTab === 'function') {
        onShowTab(nextIndex);
      }
    }
  };

  var getChildren = function getChildren(children) {
    return recursiveMap(children, function (child, index) {
      if (child.type === TabNavItem) {
        return React__default.cloneElement(child, {
          index: index,
          tabIdx: tabIdx,
          isActive: index === selectedIndex,
          onClick: handleClick
        });
      } else if (child.type === TabPanel) {
        return React__default.cloneElement(child, {
          index: index,
          isActive: index === selectedIndex
        });
      } else {
        return child;
      }
    });
  };

  var handleClick = function handleClick(e) {
    if (props.enableURLhash === false) {
      e.preventDefault();
    }

    var node = e.currentTarget;

    if (node && node.getAttribute('role') === 'tab') {
      navigateTab(node.getAttribute('index'));
    }
  };

  var getClassName = function getClassName() {
    console.log('justified', justified, justified === true ? ' st-justified' : '');
    return 'st st-theme-' + (theme || 'default') + (className || '') + (orientation ? ' st-' + orientation : '') + (justified === 'true' ? ' st-justified' : '');
  };

  return /*#__PURE__*/React__default.createElement("div", _extends({}, attributes, {
    className: getClassName()
  }), getChildren(props.children));
}

function TabNav(props) {
  var className = props.className,
      attributes = _objectWithoutPropertiesLoose(props, ["className"]);

  return /*#__PURE__*/React__default.createElement("ul", _extends({}, attributes, {
    className: 'nav' + (className || ''),
    role: "tablist"
  }), props.children);
}

function TabContent(props) {
  var className = props.className,
      attributes = _objectWithoutPropertiesLoose(props, ["className"]);

  return /*#__PURE__*/React__default.createElement("div", _extends({}, attributes, {
    className: 'tab-content' + (className || '')
  }), props.children);
}

exports.TabContent = TabContent;
exports.TabNav = TabNav;
exports.TabNavItem = TabNavItem;
exports.TabPanel = TabPanel;
exports.Tabs = Tabs;
//# sourceMappingURL=index.js.map
